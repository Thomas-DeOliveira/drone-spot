// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  passwordHash  String?
  role          Role      @default(USER)

  accounts      Account[]
  sessions      Session[]
  spots         Spot[]
  ratings       SpotRating[]
  maps          Map[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

enum Role {
  USER
  ADMIN
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Spot {
  id          String   @id @default(cuid())
  title       String
  description String?
  latitude    Float
  longitude   Float
  imageUrl    String?
  mapId       String?
  map         Map?     @relation(fields: [mapId], references: [id], onDelete: Cascade)
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  images      SpotImage[]
  ratings     SpotRating[]
  tags        Tag[]    @relation("SpotTags")
  maps        SpotMap[]
  createdAt   DateTime @default(now())
}

model Map {
  id        String   @id @default(cuid())
  name      String
  icon      String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  spots     Spot[]
  shares    MapShare[]
  spotLinks SpotMap[]
  createdAt DateTime @default(now())
  // Public via lien
  linkPublic  Boolean  @default(false)
  publicToken String?  @unique
}

model MapShare {
  id            String  @id @default(cuid())
  mapId         String
  map           Map     @relation(fields: [mapId], references: [id], onDelete: Cascade)
  invitedEmail  String
  invitedUserId String?
  role          MapShareRole @default(READ)
  createdAt     DateTime @default(now())

  @@unique([mapId, invitedEmail])
}

enum MapShareRole {
  READ
  WRITE
}

model SpotMap {
  spotId    String
  mapId     String
  spot      Spot   @relation(fields: [spotId], references: [id], onDelete: Cascade)
  map       Map    @relation(fields: [mapId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@id([spotId, mapId])
}

model SpotImage {
  id        String   @id @default(cuid())
  spotId    String
  spot      Spot     @relation(fields: [spotId], references: [id], onDelete: Cascade)
  url       String
  createdAt DateTime @default(now())
}

model SpotRating {
  id        String   @id @default(cuid())
  spotId    String
  userId    String
  value     Int
  spot      Spot     @relation(fields: [spotId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([spotId, userId])
}

model Tag {
  id     String @id @default(cuid())
  name   String @unique
  spots  Spot[] @relation("SpotTags")
}
